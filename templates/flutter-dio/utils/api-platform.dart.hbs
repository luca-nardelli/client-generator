import 'maker.dart';

class ApiPlatformPagedCollection<T extends BaseModel> {
  int totalItems;
  List<T> member;

  ApiPlatformPagedCollection.fromJson(Map<String, dynamic> json)
      : totalItems = json['{{hydraPrefix}}totalItems'],
        member = (json['{{hydraPrefix}}member'] as List).map((elem) => make<T>(elem)).toList();

  Map<String, dynamic> toJson() => {
        "{{hydraPrefix}}totalItems": totalItems,
        "{{hydraPrefix}}member": member.map((elem) => elem.toJson()).toList(),
      };
}

class SerializationOptions {
  final bool shallow;  // Serializes entities only through their IRI

  SerializationOptions({this.shallow});
}

// Contains metadata used for model fields
class FieldMetadata {
  bool dirty = false;
}


nullSerializer<T>(Map<String,dynamic> data, String propName, dynamic propValue, bool isDirty, [Map<Type,Map<String,SerializationOptions>> rootOptions = null]){

  // Handle null value
  if(propValue == null){
    if(isDirty){
      data[propName] = null;
    }
    return;
  }

  // Handle Lists
  if (propValue is List){
    data[propName] = List();
    for(final elem in propValue){
      if (elem is BaseModel){
        data[propName].add(elem.toJson(rootOptions));
      } else {
        data[propName].add(elem);
      }
    }
    return;
  }

  // Handle rest
  final options = ((rootOptions ?? {})[T] ?? {})[propName] ?? SerializationOptions(shallow: false);
  if(propValue is BaseModel){
    if(options.shallow){
      data[propName] = propValue.toIri();
    } else {
      data[propName] = propValue.toJson(rootOptions);
    }
  } else {
    data[propName] = propValue;
  }
  return;
}
