import 'maker.dart';

class ApiPlatformPagedCollection<T extends BaseModel> {
  int totalItems;
  List<T> member;

  ApiPlatformPagedCollection.fromJson(Map<String, dynamic> json)
      : totalItems = json['{{hydraPrefix}}totalItems'],
        member = (json['{{hydraPrefix}}member'] as List).map((elem) => make<T>(elem)).toList();

  Map<String, dynamic> toJson() => {
        "{{hydraPrefix}}totalItems": totalItems,
        "{{hydraPrefix}}member": member.map((elem) => elem.toJson()).toList(),
      };
}

class SerializationOptions {
  final bool shallow;  // Serializes entities only through their IRI

  SerializationOptions({this.shallow});
}


nullSerializer<T,E>(Map<String,dynamic> data, String propName, dynamic propValue, bool isDirty, [Map<Type,Map<Type,SerializationOptions>> rootOptions = null]){
  // Handle Lists
  if (propValue is List){
    data[propName] = List<E>();
    for(final elem in propValue){
      if (elem is BaseModel){
        data[propName].add(elem.toJson(rootOptions));
      } else {
        data[propName].add(elem);
      }
    }
  }

  // Handle null value
  if(propValue == null){
    if(isDirty){
      data[propName] = null;
      return;
    }
  }

  // Handle rest
  final options = rootOptions[T][E] ?? null;
  if( options != null ){
    if(propValue is BaseModel && options.shallow){
      data[propName] = propValue.toIri();
      return;
    }
  }
  else {
    if (propValue is BaseModel){
      data[propName] = propValue.toJson(rootOptions);
    } else {
      data[propName] = propValue;
    }
    return;
  }
}
