import '../utils/maker.dart';
import '../utils/api-platform.dart';
{{#each imports}}
import '{{file}}';
{{/each}}

class {{name}} extends BaseModel {
{{#each fields}}
  {{~#if reference}}
    {{~#if maxCardinality}}
  {{{type}}} _{{{name}}}
    {{~else}}
  List<{{{type}}}> _{{{name}}}
    {{~/if}}
  {{~else}}
  {{{type}}} _{{{name}}}
  {{~/if}};
{{/each}}

{{#each fields}}
  var _{{name}}Metadata = FieldMetadata();
{{/each}}

  {{name}}(): super();

  {{name}}.fromJson(Map<String, dynamic> json): super.fromJson(json) {
{{#each fields}}
    if (json.containsKey('{{name}}')){
{{~#if reference}}
  {{~#if maxCardinality}}
      {{~name}} = {{type}}.fromJsonOrIri(json['{{name}}']);
  {{~else}}
      {{~name}} = (json['{{name}}'] as List ?? []).map((elem) => {{type}}.fromJsonOrIri(elem)).toList();
  {{~/if}}
{{~else~}}
      {{~name}} = json['{{name}}'];
{{~/if~}}
    }
{{/each}}
  }

  {{name}}.fromIri(String iri) : super.fromIri(iri);

  factory {{name}}.fromJsonOrIri(dynamic jsonOrIri) {
    if (jsonOrIri is String) {
      return {{name}}.fromIri(jsonOrIri);
    } else if (jsonOrIri is Map) {
      return {{name}}.fromJson(jsonOrIri);
    }
    return null;
  }

  toJson([Map<Type,Map<String,SerializationOptions>> options]) {
    final data = super.toJson();
{{#each fields}}
  {{~#if reference}}
    {{~#if maxCardinality}}
    nullSerializer<{{../name}}>(data,'{{name}}',{{name}},{{name}}Metadata.dirty, options);
    {{~else}}
    nullSerializer<{{../name}}>(data,'{{name}}',{{name}},{{name}}Metadata.dirty, options);
    {{~/if}}
  {{~else}}
    nullSerializer<{{../name}}>(data,'{{name}}',{{name}},{{name}}Metadata.dirty);
  {{~/if}}

{{/each}}
    return data;
  }

  // Getters and setters
{{#each fields}}
  {{~#if reference}}
    {{~#if maxCardinality}}
  {{{type}}} get {{{name}}} { return _{{name}}; }
  FieldMetadata get {{{name}}}Metadata { return _{{name}}Metadata; }
  set {{{name}}}({{{type}}} val) { _{{name}}Metadata.dirty = true; _{{name}} = val; }
    {{~else}}
  List<{{{type}}}> get {{{name}}} { return _{{name}}; }
  FieldMetadata get {{{name}}}Metadata { return _{{name}}Metadata; }
  set {{{name}}}(List<{{{type}}}> val) { _{{name}}Metadata.dirty = true; _{{name}} = val; }
    {{~/if}}
  {{~else}}
  {{{type}}} get {{{name}}} { return _{{name}}; }
  FieldMetadata get {{{name}}}Metadata { return _{{name}}Metadata; }
  set {{{name}}}({{{type}}} val) { _{{name}}Metadata.dirty = true; _{{name}} = val; }
  {{~/if}}

{{/each}}

}
