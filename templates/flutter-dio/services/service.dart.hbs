import 'dart:convert';
import 'dart:io';

import 'package:dio/dio.dart';

import '../models/{{resourceFile}}';
import '../utils/api-platform.dart';
import '../utils/maker.dart';

class {{prefixedName}}Service {
  Dio client;

  static const RESOURCE_NAME = '{{pluralize (toLowerCase (camelCaseToSnakeCase name))}}';

  {{prefixedName}}Service(this.client);

  Future<ApiPlatformPagedCollection<T>> getCollection<T extends {{prefixedName}}>({
    Map<String, dynamic> queryParameters,
    Options options,
    CancelToken cancelToken,
    ProgressCallback onReceiveProgress,
  }) {
    if (options == null) {
      options = Options();
    }
    options.responseType = ResponseType.json;
    options.contentType = ContentType.json.toString();
    options.headers['Accept'] = 'application/ld+json';
    return client
        .get(buildIri(), queryParameters: queryParameters, options: options, cancelToken: cancelToken, onReceiveProgress: onReceiveProgress)
        .then((resp) {
      if (resp.data is String) {
        resp.data = jsonDecode(resp.data);
      }
      return ApiPlatformPagedCollection<T>.fromJson(resp.data);
    });
  }

  Future<T> getItem<T extends {{prefixedName}}>({
    String id,
    String iri,
    Map<String, dynamic> queryParameters,
    Options options,
    CancelToken cancelToken,
    ProgressCallback onReceiveProgress,
  }) {
    if (options == null) {
      options = Options();
    }
    options.responseType = ResponseType.json;
    options.contentType = ContentType.json.toString();
    options.headers['Accept'] = 'application/ld+json';
    return client
        .get(buildIri(id: id, iri: iri), queryParameters: queryParameters, options: options, cancelToken: cancelToken, onReceiveProgress: onReceiveProgress)
        .then((resp) {
      if (resp.data is String) {
        resp.data = jsonDecode(resp.data);
      }
      return make<T>(resp.data);
    });
  }

  Future<T> addItem<T extends {{prefixedName}}>({
    {{prefixedName}} data,
    Map<Type,Map<String,SerializationOptions>> serializationOptions,
    Map<String, dynamic> queryParameters,
    Options options,
    CancelToken cancelToken,
    ProgressCallback onSendProgress,
    ProgressCallback onReceiveProgress,
  }) {
    if (options == null) {
      options = Options();
    }
    options.responseType = ResponseType.json;
    options.contentType = ContentType.json.toString();
    options.headers['Accept'] = 'application/ld+json';
    return client
        .post(buildIri(),
            data: data.toJson(serializationOptions),
            queryParameters: queryParameters,
            options: options,
            cancelToken: cancelToken,
            onReceiveProgress: onReceiveProgress,
            onSendProgress: onSendProgress)
        .then((resp) {
      if (resp.data is String) {
        resp.data = jsonDecode(resp.data);
      }
      return make<T>(resp.data);
    });
  }

  Future<T> updateItem<T extends {{prefixedName}}>({
    String id,
    String iri,
    {{prefixedName}} data,
    Map<Type,Map<String,SerializationOptions>> serializationOptions,
    Map<String, dynamic> queryParameters,
    Options options,
    CancelToken cancelToken,
    ProgressCallback onSendProgress,
    ProgressCallback onReceiveProgress,
  }) {
    if (options == null) {
      options = Options();
    }
    options.responseType = ResponseType.json;
    options.contentType = ContentType.json.toString();
    options.headers['Accept'] = 'application/ld+json';
    return client
        .put(buildIri(id: id, iri: iri),
            data: data.toJson(serializationOptions),
            queryParameters: queryParameters,
            options: options,
            cancelToken: cancelToken,
            onReceiveProgress: onReceiveProgress,
            onSendProgress: onSendProgress)
        .then((resp) {
      if (resp.data is String) {
        resp.data = jsonDecode(resp.data);
      }
      return make<T>(resp.data);
    });
  }

  Future<Response> deleteItem({
    String id,
    String iri,
    Map<String, dynamic> queryParameters,
    Options options,
    CancelToken cancelToken,
  }) {
    if (options == null) {
      options = Options();
    }
    options.responseType = ResponseType.json;
    options.contentType = ContentType.json.toString();
    options.headers['Accept'] = 'application/ld+json';
    return client.delete(buildIri(id: id, iri: iri), queryParameters: queryParameters, options: options, cancelToken: cancelToken);
  }

  static buildIri({String id, String iri}) {
    if (id != null) {
      return "/api/$RESOURCE_NAME/$id";
    } else if (iri != null) {
      return iri;
    } else {
      return "/api/$RESOURCE_NAME";
    }
  }
}
