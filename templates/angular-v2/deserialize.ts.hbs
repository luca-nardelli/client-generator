{{#each resources}}
import { {{~title~}} } from '../interfaces/{{interfaceFilename}}';
import {Raw{{~title~}} } from '../raw-interfaces/{{interfaceFilename}}';
{{/each}}
import {parseISO} from 'date-fns';

function safeParseDate(date: string) {
  if (!date) {
    return null;
  }
  return parseISO(date);
}

{{#each resources}}
export function deserializeRaw{{title}}(data: Raw{{title}} | string): {{title}} {
  if (data === undefined || data === null) {
    return null;
  }
  if (typeof data === 'string') {
    return {
      _shallow: true,
      '@id': data,
    };
  }
  return {
    _shallow: false,
    '@id': data['@id'],
{{#each fields}}
    {{{name}}}: {{#if reference~}}
      {{~#if isMultiple~}}safeMap(data.{{name}}, deserializeRaw{{reference.title}}){{~else~}}deserializeRaw{{reference.title}}(data.{{name}}){{~/if~}}
      {{~else if isDate~}}safeParseDate(data.{{name}}) {{~else~}} data.{{name}}
    {{~/if~}},
{{/each}}
  };
}

{{/each}}

function safeMap<T, U>(list: T[], callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any) {
  if (list) {
    return list.map(callbackfn, thisArg);
  }
  return [];
}
