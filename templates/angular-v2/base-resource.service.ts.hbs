import {HttpClient} from '@angular/common/http';
import {ApiPlatformIdentifier, ApiPlatformPagedCollection, BaseRawResource, BaseResource, HttpClientOptions} from './utils';
import {parseISO} from 'date-fns';
import {map} from 'rxjs/operators';
import {SerializerService} from '../serializer/serializer.service';
import {NormalizeOpts} from '../serializer/serializer';

export abstract class BaseResourceService<T extends BaseResource, U extends BaseRawResource> {

  protected constructor(
    protected http: HttpClient,
    protected baseUrl: string,
    protected serializer: SerializerService,
    public readonly RESOURCE_NAME: string,
    public readonly RESOURCE_TYPE: string,
  ) {
  }


  getCollectionRaw<K = U>(options?: HttpClientOptions) {
    return this.http.get<ApiPlatformPagedCollection<K>>(`${this.baseUrl}/api/${this.RESOURCE_NAME}`, options);
  }

  getCollection<K = T>(options?: HttpClientOptions) {
    return this.getCollectionRaw(options)
      .pipe(map(value => {
        value['hydra:member'] = value['hydra:member'].map(value1 => this.serializer.denormalize(value1,this.RESOURCE_TYPE)) as any;
        return value as unknown as ApiPlatformPagedCollection<K>;
      }));
  }

  addItemRaw<K = U>(item: U, options?: HttpClientOptions) {
    return this.http.post<K>(`${this.baseUrl}/api/${this.RESOURCE_NAME}`, item, options);
  }

  addRawItem(item: U, options?: HttpClientOptions) {
    return this.addItemRaw(item, options)
      .pipe(map(value => this.serializer.denormalize(value,this.RESOURCE_TYPE) as unknown as T));
  }

  addItem(item: T, normalizeOpts?: NormalizeOpts, options?: HttpClientOptions) {
    const normalized = this.serializer.normalize(item,this.RESOURCE_TYPE,normalizeOpts);
    return this.addItemRaw(normalized, options)
      .pipe(map(value => this.serializer.denormalize(value,this.RESOURCE_TYPE) as unknown as T));
  }

  getItemRaw<K = U>(id: ApiPlatformIdentifier, options?: HttpClientOptions) {
    return this.http.get<K>(`${this.baseUrl}${this.buildIri(id)}`, options);
  }

  getItem<K = T>(id: ApiPlatformIdentifier, options?: HttpClientOptions) {
    return this.getItemRaw(id, options).pipe(map(value => this.serializer.denormalize(value,this.RESOURCE_TYPE) as unknown as K));
  }

  updateItemRaw<K = U>(item: U, options?: HttpClientOptions) {
    return this.http.put<K>(`${this.baseUrl}${this.buildIri(item)}`, item, options);
  }

  updateRawItem(item: U, options?: HttpClientOptions) {
    return this.updateItemRaw(item, options)
      .pipe(map(value => this.serializer.denormalize(value,this.RESOURCE_TYPE) as unknown as T));
  }

  updateItem(item: T, normalizeOpts?: NormalizeOpts, options?: HttpClientOptions) {
    const normalized = this.serializer.normalize(item,this.RESOURCE_TYPE,normalizeOpts);
    return this.updateItemRaw(normalized, options)
      .pipe(map(value => this.serializer.denormalize(value,this.RESOURCE_TYPE) as unknown as T));
  }

  deleteItem(id: ApiPlatformIdentifier, options?: HttpClientOptions) {
    return this.http.delete<{}>(`${this.baseUrl}${this.buildIri(id)}`, options);
  }

  saveItemRaw<K = U>(item: U, options?: HttpClientOptions) {
    if(!item['@id']){
      return this.addItemRaw<K>(item,options);
    } else {
      return this.updateItemRaw<K>(item,options);
    }
  }

  saveRawItem(item: U, options?: HttpClientOptions) {
    if(!item['@id']){
      return this.addRawItem(item,options);
    } else {
      return this.updateRawItem(item,options);
    }
  }

  saveItem(item: T, normalizeOpts?: NormalizeOpts, options?: HttpClientOptions) {
    if(!item['@id']){
      return this.addItem(item, normalizeOpts, options);
    } else {
      return this.updateItem(item, normalizeOpts, options);
    }
  }

  buildIri(id?: ApiPlatformIdentifier): string {
    if (id && id.id) {
      return `/api/${this.RESOURCE_NAME}/${id.id}`;
    } else if (id && id['@id']) {
      return `${id['@id']}`;
    } else {
      return `/api/${this.RESOURCE_NAME}`;
    }
  }
}
