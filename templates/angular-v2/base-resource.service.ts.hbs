import {HttpClient} from '@angular/common/http';
import {ApiPlatformIdentifier, ApiPlatformPagedCollection, BaseRawResource, BaseResource, HttpClientOptions} from './utils';
import {parseISO} from 'date-fns';
import {map} from 'rxjs/operators';

export abstract class BaseResourceService<T extends BaseResource, U extends BaseRawResource> {

  protected constructor(
    protected http: HttpClient,
    protected baseUrl: string,
    public readonly RESOURCE_NAME: string,
  ) {
  }


  getCollectionRaw(options?: HttpClientOptions) {
    return this.http.get<ApiPlatformPagedCollection<U>>(`${this.baseUrl}/api/${this.RESOURCE_NAME}`, options);
  }

  getCollection(options?: HttpClientOptions) {
    return this.getCollectionRaw(options)
      .pipe(map(value => {
        value['hydra:member'] = value['hydra:member'].map(value1 => this.deserialize(value1)) as any;
        return value as unknown as ApiPlatformPagedCollection<T>;
      }));
  }

  addItemRaw(item: U, options?: HttpClientOptions) {
    return this.http.post<U>(`${this.baseUrl}/api/${this.RESOURCE_NAME}`, item, options);
  }

  addItem(item: U, options?: HttpClientOptions) {
    return this.addItemRaw(item, options)
      .pipe(map(value => this.deserialize(value)));
  }

  getItemRaw(id: ApiPlatformIdentifier, options?: HttpClientOptions) {
    return this.http.get<U>(`${this.baseUrl}${this.buildIri(id)}`, options);
  }

  getItem(id: ApiPlatformIdentifier, options?: HttpClientOptions) {
    return this.getItemRaw(id, options).pipe(map(value => this.deserialize(value)));
  }

  updateItemRaw(item: U, options?: HttpClientOptions) {
    return this.http.put<U>(`${this.baseUrl}${this.buildIri(item)}`, item, options);
  }

  updateItem(item: U, options?: HttpClientOptions) {
    return this.updateItemRaw(item, options).pipe(map(value => this.deserialize(value)));
  }

  deleteItem(id: ApiPlatformIdentifier, options?: HttpClientOptions) {
    return this.http.delete<{}>(`${this.baseUrl}${this.buildIri(id)}`, options);
  }

  buildIri(id?: ApiPlatformIdentifier): string {
    if (id && id.id) {
      return `/api/${this.RESOURCE_NAME}/${id.id}`;
    } else if (id && id['@id']) {
      return `${id['@id']}`;
    } else {
      return `/api/${this.RESOURCE_NAME}`;
    }
  }

  parseDate(date: string) {
    return date ? parseISO(date) : null;
  }

  parseResource(val: string | BaseRawResource): BaseResource {
    if (!val) {
      return null;
    }
    if (typeof val === 'string') {
      return {_shallow: true, '@id': val};
    }
    return {_shallow: false, ...val};
  }

  parseResources(val: string[] | BaseRawResource[]): BaseResource[] {
    const res: BaseResource[] = [];
    for (const o of val) {
      res.push(this.parseResource(o));
    }
    return res;
  }

  abstract deserialize(data: U): T;

}
